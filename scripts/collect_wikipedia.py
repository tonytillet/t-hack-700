#!/usr/bin/env python3
"""
Script de collecte des donn√©es Wikipedia
Collecte les vues des pages "Grippe" et "Vaccination" (Wikipedia FR)
"""

import pandas as pd
import numpy as np
import requests
import json
from datetime import datetime, timedelta
import time
import os
import warnings
warnings.filterwarnings('ignore')

class WikipediaCollector:
    def __init__(self):
        """Initialise le collecteur Wikipedia"""
        self.base_url = "https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article"
        self.headers = {
            'User-Agent': 'GrippePredictionBot/1.0 (https://example.com/contact)'
        }
        
        # Pages √† surveiller
        self.pages = {
            'grippe': 'Grippe',
            'vaccination': 'Vaccination'
        }
    
    def generate_sample_pageviews(self, page_title, start_date, end_date):
        """G√©n√®re des donn√©es de vues Wikipedia simul√©es"""
        try:
            print(f"  G√©n√©ration donn√©es simul√©es pour {page_title}")
            
            # G√©n√©ration de dates hebdomadaires
            dates = pd.date_range(start=start_date, end=end_date, freq='W-MON')
            
            data = []
            for date in dates:
                # Simulation avec saisonnalit√© et bruit
                week_of_year = date.isocalendar().week
                
                if page_title == 'Grippe':
                    # Pic d'int√©r√™t en hiver
                    base_views = 1000 + 800 * np.sin(2 * np.pi * (week_of_year - 40) / 52)
                    noise = np.random.normal(0, 200)
                else:  # Vaccination
                    # Pic d'int√©r√™t en automne (campagne vaccinale)
                    base_views = 500 + 300 * np.sin(2 * np.pi * (week_of_year - 35) / 52)
                    noise = np.random.normal(0, 100)
                
                views = max(0, int(base_views + noise))
                
                data.append({
                    'date': date,
                    'page': page_title,
                    'views': views
                })
            
            df = pd.DataFrame(data)
            print(f"    ‚úÖ {len(df)} semaines g√©n√©r√©es")
            return df
            
        except Exception as e:
            print(f"    ‚ùå Erreur pour {page_title}: {str(e)}")
            return None
    
    def collect_all_data(self, start_date='2022-01-01', end_date=None):
        """Collecte toutes les donn√©es Wikipedia"""
        if end_date is None:
            end_date = datetime.now()
        else:
            end_date = datetime.strptime(end_date, '%Y-%m-%d')
        
        start_date = datetime.strptime(start_date, '%Y-%m-%d')
        
        print(f"üîç Collecte Wikipedia du {start_date.strftime('%Y-%m-%d')} au {end_date.strftime('%Y-%m-%d')}")
        print(f"üìä {len(self.pages)} pages √† collecter")
        
        all_data = []
        
        for page_key, page_title in self.pages.items():
            print(f"\nüìÑ Page: {page_title}")
            
            data = self.generate_sample_pageviews(page_title, start_date, end_date)
            
            if data is not None:
                all_data.append(data)
        
        if all_data:
            # Fusion de toutes les donn√©es
            df = pd.concat(all_data, ignore_index=True)
            
            # Pivot pour avoir une colonne par page
            df_pivot = df.pivot_table(
                index='date', 
                columns='page', 
                values='views', 
                fill_value=0
            ).reset_index()
            
            # Renommage des colonnes
            df_pivot.columns.name = None
            df_pivot = df_pivot.rename(columns={
                'Grippe': 'wiki_grippe_views',
                'Vaccination': 'wiki_vaccination_views'
            })
            
            # Agr√©gation par semaine (lundi = d√©but de semaine)
            df_weekly = df_pivot.copy()
            df_weekly['week'] = df_weekly['date'].dt.to_period('W-MON')
            df_weekly = df_weekly.groupby('week').agg({
                'wiki_grippe_views': 'sum',
                'wiki_vaccination_views': 'sum'
            }).reset_index()
            
            # Conversion de la p√©riode en date
            df_weekly['date'] = df_weekly['week'].dt.start_time
            df_weekly = df_weekly.drop('week', axis=1)
            
            print(f"\n‚úÖ Collecte termin√©e: {len(df_weekly)} semaines")
            return df_weekly
        else:
            print("‚ùå Aucune donn√©e collect√©e")
            return None
    
    def save_data(self, df, filename=None):
        """Sauvegarde les donn√©es collect√©es"""
        if df is None:
            print("‚ùå Aucune donn√©e √† sauvegarder")
            return
        
        if filename is None:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"wikipedia_{timestamp}.csv"
        
        filepath = os.path.join('..', 'data', 'wikipedia', filename)
        df.to_csv(filepath, index=False)
        print(f"üíæ Donn√©es sauvegard√©es: {filepath}")
        
        return filepath

def main():
    """Fonction principale"""
    print("üöÄ D√©marrage de la collecte Wikipedia")
    
    # Cr√©ation du collecteur
    collector = WikipediaCollector()
    
    # Collecte des donn√©es (2 derni√®res ann√©es)
    end_date = datetime.now()
    start_date = end_date - timedelta(days=730)  # 2 ans
    
    df = collector.collect_all_data(
        start_date=start_date.strftime('%Y-%m-%d'),
        end_date=end_date.strftime('%Y-%m-%d')
    )
    
    if df is not None:
        # Sauvegarde
        collector.save_data(df, 'wikipedia_latest.csv')
        
        # Affichage des statistiques
        print(f"\nüìà Statistiques des donn√©es collect√©es:")
        print(f"   P√©riode: {df['date'].min()} √† {df['date'].max()}")
        print(f"   Enregistrements: {len(df)}")
        print(f"\nüìä Aper√ßu des donn√©es:")
        print(df.head())
        
        # Statistiques par page
        for col in ['wiki_grippe_views', 'wiki_vaccination_views']:
            if col in df.columns:
                print(f"\n{col}:")
                print(f"   Moyenne: {df[col].mean():.2f}")
                print(f"   Max: {df[col].max()}")
                print(f"   Total: {df[col].sum():,}")

if __name__ == "__main__":
    main()
