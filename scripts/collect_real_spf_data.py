#!/usr/bin/env python3
"""
Collecte des donn√©es r√©elles de Sant√© Publique France
Donn√©es officielles de grippe, urgences, vaccination, sentinelles
"""

import requests
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import os
import time
import json

def collect_urgences_data():
    """Collecte les donn√©es d'urgences grippe de SPF"""
    print("üè• Collecte des donn√©es d'urgences grippe...")
    
    # URL de l'API SPF pour les urgences grippe
    url = "https://odisse.santepubliquefrance.fr/explore/dataset/grippe-passages-aux-urgences-et-actes-sos-medecins-france/download/?format=csv&timezone=Europe/Berlin&lang=fr&use_labels_for_header=true&csv_separator=%3B"
    
    try:
        # T√©l√©chargement des donn√©es
        response = requests.get(url, timeout=30)
        response.raise_for_status()
        
        # Sauvegarde du fichier brut
        with open('data/spf/urgences_raw.csv', 'w', encoding='utf-8') as f:
            f.write(response.text)
        
        # Lecture et traitement
        df = pd.read_csv('data/spf/urgences_raw.csv', sep=';')
        
        # Nettoyage des donn√©es
        if 'date' in df.columns:
            df['date'] = pd.to_datetime(df['date'], errors='coerce')
        
        # Filtrage pour la grippe
        if 'sursaud_cl_age_gene' in df.columns:
            df = df[df['sursaud_cl_age_gene'] == 'Tous √¢ges']
        
        if 'sursaud_cl_type_etablissement' in df.columns:
            df = df[df['sursaud_cl_type_etablissement'] == 'urgences']
        
        # Agr√©gation par semaine et r√©gion
        df['week'] = df['date'].dt.isocalendar().week
        df['year'] = df['date'].dt.year
        
        # Groupement par r√©gion et semaine
        urgences_weekly = df.groupby(['reg', 'year', 'week']).agg({
            'nbre_pass_corona': 'sum',
            'nbre_pass_tot': 'sum'
        }).reset_index()
        
        # Calcul du pourcentage de grippe
        urgences_weekly['pct_grippe'] = (urgences_weekly['nbre_pass_corona'] / urgences_weekly['nbre_pass_tot'] * 100).fillna(0)
        
        # Sauvegarde
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f'data/spf/spf_urgences_real_{timestamp}.csv'
        urgences_weekly.to_csv(filename, index=False)
        
        print(f"‚úÖ Donn√©es d'urgences collect√©es: {len(urgences_weekly)} enregistrements")
        return filename
        
    except Exception as e:
        print(f"‚ùå Erreur collecte urgences: {e}")
        return None

def collect_sentinelles_data():
    """Collecte les donn√©es du r√©seau Sentinelles"""
    print("üî¨ Collecte des donn√©es Sentinelles...")
    
    # URL de l'API Sentinelles
    url = "https://www.sentiweb.fr/api/incidence?disease=1&start=2019-01-01&end=2025-12-31"
    
    try:
        response = requests.get(url, timeout=30)
        response.raise_for_status()
        
        data = response.json()
        
        # Conversion en DataFrame
        df = pd.DataFrame(data)
        
        if 'date' in df.columns:
            df['date'] = pd.to_datetime(df['date'])
        
        # Sauvegarde
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f'data/spf/spf_sentinelles_real_{timestamp}.csv'
        df.to_csv(filename, index=False)
        
        print(f"‚úÖ Donn√©es Sentinelles collect√©es: {len(df)} enregistrements")
        return filename
        
    except Exception as e:
        print(f"‚ùå Erreur collecte Sentinelles: {e}")
        return None

def collect_vaccination_data():
    """Collecte les donn√©es de vaccination"""
    print("üíâ Collecte des donn√©es de vaccination...")
    
    # URL de l'API SPF pour la vaccination
    url = "https://odisse.santepubliquefrance.fr/explore/dataset/couverture-vaccinale-grippe-saisonniere/download/?format=csv&timezone=Europe/Berlin&lang=fr&use_labels_for_header=true&csv_separator=%3B"
    
    try:
        response = requests.get(url, timeout=30)
        response.raise_for_status()
        
        # Sauvegarde du fichier brut
        with open('data/spf/vaccination_raw.csv', 'w', encoding='utf-8') as f:
            f.write(response.text)
        
        # Lecture et traitement
        df = pd.read_csv('data/spf/vaccination_raw.csv', sep=';')
        
        # Nettoyage des donn√©es
        if 'annee' in df.columns:
            df['year'] = df['annee']
        
        # Sauvegarde
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f'data/spf/spf_vaccination_real_{timestamp}.csv'
        df.to_csv(filename, index=False)
        
        print(f"‚úÖ Donn√©es de vaccination collect√©es: {len(df)} enregistrements")
        return filename
        
    except Exception as e:
        print(f"‚ùå Erreur collecte vaccination: {e}")
        return None

def collect_ias_data():
    """Collecte les donn√©es IAS (Indicateur Avanc√© Sanitaire)"""
    print("üìä Collecte des donn√©es IAS...")
    
    # URL de l'API SPF pour l'IAS
    url = "https://odisse.santepubliquefrance.fr/explore/dataset/indicateur-avance-sanitaire/download/?format=csv&timezone=Europe/Berlin&lang=fr&use_labels_for_header=true&csv_separator=%3B"
    
    try:
        response = requests.get(url, timeout=30)
        response.raise_for_status()
        
        # Sauvegarde du fichier brut
        with open('data/spf/ias_raw.csv', 'w', encoding='utf-8') as f:
            f.write(response.text)
        
        # Lecture et traitement
        df = pd.read_csv('data/spf/ias_raw.csv', sep=';')
        
        # Nettoyage des donn√©es
        if 'date' in df.columns:
            df['date'] = pd.to_datetime(df['date'], errors='coerce')
        
        # Sauvegarde
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f'data/spf/spf_ias_real_{timestamp}.csv'
        df.to_csv(filename, index=False)
        
        print(f"‚úÖ Donn√©es IAS collect√©es: {len(df)} enregistrements")
        return filename
        
    except Exception as e:
        print(f"‚ùå Erreur collecte IAS: {e}")
        return None

def main():
    """Fonction principale de collecte"""
    print("üöÄ COLLECTE DES DONN√âES R√âELLES SANT√â PUBLIQUE FRANCE")
    print("=" * 60)
    
    # Cr√©ation du dossier
    os.makedirs('data/spf', exist_ok=True)
    
    # Collecte des donn√©es
    files = []
    
    # 1. Urgences
    urgences_file = collect_urgences_data()
    if urgences_file:
        files.append(urgences_file)
    
    time.sleep(2)  # Pause entre les requ√™tes
    
    # 2. Sentinelles
    sentinelles_file = collect_sentinelles_data()
    if sentinelles_file:
        files.append(sentinelles_file)
    
    time.sleep(2)
    
    # 3. Vaccination
    vaccination_file = collect_vaccination_data()
    if vaccination_file:
        files.append(vaccination_file)
    
    time.sleep(2)
    
    # 4. IAS
    ias_file = collect_ias_data()
    if ias_file:
        files.append(ias_file)
    
    # R√©sum√©
    print(f"\n‚úÖ COLLECTE TERMIN√âE")
    print(f"üìÅ Fichiers cr√©√©s: {len(files)}")
    for file in files:
        print(f"  - {file}")
    
    # Sauvegarde de la configuration
    config = {
        'collection_date': datetime.now().isoformat(),
        'files': files,
        'source': 'Sant√© Publique France',
        'data_type': 'real'
    }
    
    with open('data/spf/collection_config.json', 'w') as f:
        json.dump(config, f, indent=2)
    
    print(f"\nüìã Configuration sauvegard√©e: data/spf/collection_config.json")

if __name__ == "__main__":
    main()
