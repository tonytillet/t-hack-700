#!/usr/bin/env python3
"""
Script de test simple pour identifier les probl√®mes
"""

import pandas as pd
import pyarrow as pa
import json
import os
from pathlib import Path

print('üîç TEST SIMPLE DU SCRIPT')
print('=' * 40)
print()

# Test 1: Imports
print('‚úÖ TEST 1: IMPORTS')
try:
    import pandas as pd
    import pyarrow as pa
    import json
    import os
    from pathlib import Path
    print('‚Ä¢ Tous les imports OK')
except Exception as e:
    print(f'‚Ä¢ Erreur imports: {e}')
    exit(1)

# Test 2: Structure des dossiers
print('\n‚úÖ TEST 2: STRUCTURE DES DOSSIERS')
base_dir = Path("data")
raw_dir = base_dir / "raw" / "data_gouv_fr"
processed_dir = base_dir / "processed"

print(f'‚Ä¢ Base dir: {base_dir.exists()}')
print(f'‚Ä¢ Raw dir: {raw_dir.exists()}')
print(f'‚Ä¢ Processed dir: {processed_dir.exists()}')

if not raw_dir.exists():
    print('‚ùå Dossier data_gouv_fr non trouv√©')
    exit(1)

# Test 3: Fichiers JSON
print('\n‚úÖ TEST 3: FICHIERS JSON')
files = [f for f in raw_dir.iterdir() if f.suffix == '.json']
print(f'‚Ä¢ Fichiers JSON trouv√©s: {len(files)}')

if len(files) == 0:
    print('‚ùå Aucun fichier JSON trouv√©')
    exit(1)

# Test 4: Lecture d'un fichier JSON
print('\n‚úÖ TEST 4: LECTURE D\'UN FICHIER JSON')
test_file = files[0]
print(f'‚Ä¢ Test avec: {test_file.name}')

try:
    with open(test_file, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    if isinstance(data, dict) and 'data' in data:
        print(f'‚Ä¢ Datasets: {len(data["data"])}')
        print('‚Ä¢ Format JSON OK')
    else:
        print('‚Ä¢ Format JSON non reconnu')
        
except Exception as e:
    print(f'‚Ä¢ Erreur lecture JSON: {e}')
    exit(1)

# Test 5: Cr√©ation de dossiers
print('\n‚úÖ TEST 5: CR√âATION DE DOSSIERS')
analyzed_dir = processed_dir / "analyzed_data"

try:
    analyzed_dir.mkdir(exist_ok=True)
    print(f'‚Ä¢ Dossier cr√©√©: {analyzed_dir}')
except Exception as e:
    print(f'‚Ä¢ Erreur cr√©ation dossier: {e}')
    exit(1)

# Test 6: Test pandas/pyarrow
print('\n‚úÖ TEST 6: PANDAS/PYARROW')
try:
    # Cr√©er un DataFrame de test
    test_df = pd.DataFrame({
        'col1': [1, 2, 3],
        'col2': ['a', 'b', 'c']
    })
    
    # Sauvegarder en Parquet
    test_file = analyzed_dir / 'test.parquet'
    test_df.to_parquet(test_file, index=False)
    
    # Relire le fichier
    df_read = pd.read_parquet(test_file)
    
    print(f'‚Ä¢ DataFrame cr√©√©: {test_df.shape}')
    print(f'‚Ä¢ Parquet sauvegard√©: {test_file}')
    print(f'‚Ä¢ Parquet relu: {df_read.shape}')
    print('‚Ä¢ Pandas/PyArrow OK')
    
except Exception as e:
    print(f'‚Ä¢ Erreur pandas/pyarrow: {e}')
    exit(1)

print('\nüéØ TOUS LES TESTS PASS√âS !')
print('Le script devrait fonctionner correctement.')
print()
print('üí° POUR LANCER LE SCRIPT COMPLET:')
print('python3 scripts/analyze_and_clean.py')
