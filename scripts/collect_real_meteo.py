#!/usr/bin/env python3
"""
Script de collecte des VRAIES donn√©es m√©t√©o
Utilise Open-Meteo API pour r√©cup√©rer les donn√©es m√©t√©o r√©elles
"""

import pandas as pd
import requests
import json
from datetime import datetime, timedelta
import time
import os
import warnings
warnings.filterwarnings('ignore')

class RealMeteoCollector:
    def __init__(self):
        """Initialise le collecteur m√©t√©o"""
        self.base_url = "https://archive-api.open-meteo.com/v1/archive"
        
        # Coordonn√©es des r√©gions fran√ßaises
        self.region_coords = {
            '√éle-de-France': (48.8566, 2.3522),  # Paris
            'Auvergne-Rh√¥ne-Alpes': (45.7640, 4.8357),  # Lyon
            'Nouvelle-Aquitaine': (44.8378, -0.5792),  # Bordeaux
            'Occitanie': (43.6047, 1.4442),  # Toulouse
            'Hauts-de-France': (50.6292, 3.0573),  # Lille
            'Grand Est': (48.5734, 7.7521),  # Strasbourg
            'Pays de la Loire': (47.2184, -1.5536),  # Nantes
            'Bretagne': (48.2020, -2.9326),  # Rennes
            'Normandie': (49.4432, 1.0993),  # Rouen
            'Centre-Val de Loire': (47.7516, 1.6753),  # Orl√©ans
            'Bourgogne-Franche-Comt√©': (47.3220, 5.0415),  # Dijon
            'Provence-Alpes-C√¥te d\'Azur': (43.2965, 5.3698),  # Marseille
            'Corse': (42.0396, 9.0129)  # Ajaccio
        }
    
    def get_weather_data(self, region_name, lat, lon, start_date, end_date):
        """R√©cup√®re les donn√©es m√©t√©o pour une r√©gion"""
        try:
            print(f"  Collecte m√©t√©o pour {region_name}...")
            
            # Formatage des dates
            start_str = start_date.strftime('%Y-%m-%d')
            end_str = end_date.strftime('%Y-%m-%d')
            
            # Param√®tres de la requ√™te
            params = {
                'latitude': lat,
                'longitude': lon,
                'start_date': start_str,
                'end_date': end_str,
                'daily': 'temperature_2m_mean,relative_humidity_2m_mean',
                'timezone': 'Europe/Paris'
            }
            
            # Requ√™te API
            response = requests.get(self.base_url, params=params, timeout=30)
            response.raise_for_status()
            
            data = response.json()
            
            if 'daily' not in data:
                print(f"    ‚ö†Ô∏è Aucune donn√©e m√©t√©o pour {region_name}")
                return None
            
            # Conversion en DataFrame
            df = pd.DataFrame({
                'date': pd.to_datetime(data['daily']['time']),
                'region': region_name,
                'temperature': data['daily']['temperature_2m_mean'],
                'humidity': data['daily']['relative_humidity_2m_mean']
            })
            
            print(f"    ‚úÖ {len(df)} jours collect√©s")
            return df
            
        except Exception as e:
            print(f"    ‚ùå Erreur m√©t√©o pour {region_name}: {str(e)}")
            return None
    
    def collect_all_data(self, start_date='2022-01-01', end_date=None):
        """Collecte toutes les donn√©es m√©t√©o"""
        if end_date is None:
            end_date = datetime.now()
        else:
            end_date = datetime.strptime(end_date, '%Y-%m-%d')
        
        start_date = datetime.strptime(start_date, '%Y-%m-%d')
        
        print(f"üå§Ô∏è Collecte m√©t√©o R√âELLE du {start_date.strftime('%Y-%m-%d')} au {end_date.strftime('%Y-%m-%d')}")
        print(f"üìä {len(self.region_coords)} r√©gions √† collecter")
        
        all_data = []
        
        for region_name, (lat, lon) in self.region_coords.items():
            print(f"\nüìç R√©gion: {region_name}")
            
            data = self.get_weather_data(region_name, lat, lon, start_date, end_date)
            
            if data is not None:
                all_data.append(data)
            
            # Pause pour √©viter les limites de taux
            time.sleep(1)
        
        if all_data:
            # Fusion de toutes les donn√©es
            df = pd.concat(all_data, ignore_index=True)
            
            # Agr√©gation par semaine (lundi = d√©but de semaine)
            df['week'] = df['date'].dt.to_period('W-MON')
            df_weekly = df.groupby(['week', 'region']).agg({
                'temperature': 'mean',
                'humidity': 'mean'
            }).reset_index()
            
            # Conversion de la p√©riode en date
            df_weekly['date'] = df_weekly['week'].dt.start_time
            df_weekly = df_weekly.drop('week', axis=1)
            
            print(f"\n‚úÖ Collecte termin√©e: {len(df_weekly)} enregistrements")
            return df_weekly
        else:
            print("‚ùå Aucune donn√©e collect√©e")
            return None
    
    def save_data(self, df, filename=None):
        """Sauvegarde les donn√©es collect√©es"""
        if df is None:
            print("‚ùå Aucune donn√©e √† sauvegarder")
            return
        
        if filename is None:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"meteo_real_{timestamp}.csv"
        
        filepath = os.path.join('data', 'meteo', filename)
        df.to_csv(filepath, index=False)
        print(f"üíæ Donn√©es sauvegard√©es: {filepath}")
        
        return filepath

def main():
    """Fonction principale"""
    print("üöÄ D√©marrage de la collecte m√©t√©o R√âELLES")
    
    # Cr√©ation du collecteur
    collector = RealMeteoCollector()
    
    # Collecte des donn√©es (2 derni√®res ann√©es)
    end_date = datetime.now()
    start_date = end_date - timedelta(days=730)  # 2 ans
    
    df = collector.collect_all_data(
        start_date=start_date.strftime('%Y-%m-%d'),
        end_date=end_date.strftime('%Y-%m-%d')
    )
    
    if df is not None:
        # Sauvegarde
        collector.save_data(df, 'meteo_real_latest.csv')
        
        # Affichage des statistiques
        print(f"\nüìà Statistiques des donn√©es collect√©es:")
        print(f"   P√©riode: {df['date'].min()} √† {df['date'].max()}")
        print(f"   R√©gions: {df['region'].nunique()}")
        print(f"   Enregistrements: {len(df)}")
        print(f"\nüìä Aper√ßu des donn√©es:")
        print(df.head())
        
        # Statistiques m√©t√©o
        print(f"\nüå°Ô∏è Temp√©rature moyenne: {df['temperature'].mean():.1f}¬∞C")
        print(f"üíß Humidit√© moyenne: {df['humidity'].mean():.1f}%")

if __name__ == "__main__":
    main()
