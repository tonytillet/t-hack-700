# üöÄ LUMEN - Makefile pour D√©veloppement et Production

.PHONY: help dev build start stop restart logs status clean deploy docker local

# Variables
DOCKER_IMAGE = lumen-app
DOCKER_CONTAINER = lumen-app
PORT = 8080

# Aide par d√©faut
help: ## Afficher l'aide
	@echo "üöÄ LUMEN - Commandes Disponibles"
	@echo "================================"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-15s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "üéØ Commandes principales :"
	@echo "  make dev      - D√©marrage rapide (Docker ou Local)"
	@echo "  make docker   - D√©marrage en mode Docker"
	@echo "  make local    - D√©marrage en mode Local"
	@echo "  make deploy   - Cr√©er le package de d√©ploiement"

# D√©marrage rapide (d√©tection automatique)
dev: ## D√©marrage rapide avec d√©tection automatique Docker/Local
	@echo "üöÄ LUMEN - D√©marrage Rapide"
	@echo "============================"
	@if docker info >/dev/null 2>&1; then \
		echo "üê≥ Docker d√©tect√© - D√©marrage en mode Docker"; \
		$(MAKE) docker; \
	else \
		echo "üíª Docker non disponible - D√©marrage en mode Local"; \
		$(MAKE) local; \
	fi

# Mode Docker
docker: ## D√©marrage en mode Docker
	@echo "üê≥ LUMEN - Mode Docker"
	@echo "======================"
	@if ! docker info >/dev/null 2>&1; then \
		echo "‚ùå Docker n'est pas d√©marr√©"; \
		echo "üí° D√©marrez Docker Desktop ou le service Docker"; \
		exit 1; \
	fi
	@echo "üî® Construction de l'image..."
	@./docker-manage.sh build
	@echo "üöÄ D√©marrage du conteneur..."
	@./docker-manage.sh start
	@echo ""
	@echo "‚úÖ LUMEN Docker d√©marr√© !"
	@echo "üåê Acc√®s : http://localhost:$(PORT)/"
	@echo "üõë Arr√™t : make stop"

# Mode Local
local: ## D√©marrage en mode Local
	@echo "üíª LUMEN - Mode Local"
	@echo "====================="
	@echo "üîß R√©paration des dashboards manquants..."
	@./fix_missing_dashboards.sh
	@echo "üöÄ D√©marrage du serveur local..."
	@./start.sh
	@echo ""
	@echo "‚úÖ LUMEN Local d√©marr√© !"
	@echo "üåê Acc√®s : http://localhost:8081/ (ou port d√©tect√©)"
	@echo "üõë Arr√™t : make stop"

# Construction de l'image Docker
build: ## Construire l'image Docker
	@echo "üî® Construction de l'image Docker..."
	@./docker-manage.sh build

# D√©marrage du conteneur Docker
start: ## D√©marrer le conteneur Docker
	@echo "üöÄ D√©marrage du conteneur Docker..."
	@./docker-manage.sh start

# Arr√™t du conteneur Docker
stop: ## Arr√™ter le conteneur Docker
	@echo "üõë Arr√™t du conteneur Docker..."
	@./docker-manage.sh stop
	@echo "üõë Arr√™t des processus Python locaux..."
	@pkill -f python3 2>/dev/null || true

# Red√©marrage du conteneur Docker
restart: ## Red√©marrer le conteneur Docker
	@echo "üîÑ Red√©marrage du conteneur Docker..."
	@./docker-manage.sh restart

# Logs du conteneur Docker
logs: ## Afficher les logs du conteneur Docker
	@echo "üìã Logs du conteneur Docker..."
	@./docker-manage.sh logs

# Statut du conteneur Docker
status: ## Afficher le statut du conteneur Docker
	@echo "üìä Statut du conteneur Docker..."
	@./docker-manage.sh status

# Nettoyage complet
clean: ## Nettoyer les conteneurs et images Docker
	@echo "üßπ Nettoyage Docker..."
	@./docker-manage.sh clean
	@echo "üßπ Nettoyage des processus Python..."
	@pkill -f python3 2>/dev/null || true
	@echo "‚úÖ Nettoyage termin√©"

# D√©ploiement Docker
deploy-docker: ## Cr√©er le package de d√©ploiement Docker
	@echo "üê≥ Cr√©ation du package Docker..."
	@./deploy_docker.sh

# D√©ploiement universel
deploy: ## Cr√©er le package de d√©ploiement universel
	@echo "üöÄ Cr√©ation du package universel..."
	@./deploy_universal.sh

# V√©rification des fichiers
check: ## V√©rifier les fichiers essentiels
	@echo "üîç V√©rification des fichiers..."
	@./check_files.sh

# R√©paration des dashboards
fix: ## R√©parer les dashboards manquants
	@echo "üîß R√©paration des dashboards..."
	@./fix_missing_dashboards.sh

# Test de l'acc√®s web
test: ## Tester l'acc√®s web
	@echo "üåê Test de l'acc√®s web..."
	@curl -s http://localhost:$(PORT)/ > /dev/null && echo "‚úÖ LUMEN accessible sur http://localhost:$(PORT)/" || echo "‚ùå LUMEN non accessible"

# Installation des d√©pendances
deps: ## Installer les d√©pendances Python
	@echo "üì¶ Installation des d√©pendances..."
	@pip install -r requirements.txt

# Nettoyage du projet
cleanup: ## Nettoyage agressif du projet
	@echo "üßπ Nettoyage du projet..."
	@./aggressive_cleanup.sh

# Informations sur le projet
info: ## Afficher les informations du projet
	@echo "üìä LUMEN - Informations du Projet"
	@echo "================================="
	@echo "üê≥ Docker disponible : $$(docker info >/dev/null 2>&1 && echo 'Oui' || echo 'Non')"
	@echo "üêç Python disponible : $$(python3 --version 2>/dev/null || echo 'Non install√©')"
	@echo "üìÅ Taille du projet : $$(du -sh . | cut -f1)"
	@echo "üåê Ports utilis√©s :"
	@lsof -i :8080 -i :8081 -i :8082 -i :8083 -i :8084 -i :8085 2>/dev/null || echo "   Aucun port utilis√©"
